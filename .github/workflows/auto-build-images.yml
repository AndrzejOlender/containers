name: 'Auto Build Container Images'

on:
  push:
    branches: [ main ]
    paths: 
      - 'bitnami/**/Dockerfile'
      - '.github/build-preferences.txt'
      - '.github/workflows/auto-build-images.yml'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all images'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write
  security-events: write  # For uploading Trivy SARIF results
  
jobs:
  discover-images:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.discover.outputs.matrix }}
      count: ${{ steps.discover.outputs.count }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need at least 2 commits to compare HEAD~1 for push events
        
      - name: Smart Image Discovery
        id: discover
        run: |
          images=()
          
          echo "üîç Starting smart image discovery..."
          
          # Read preferred apps from build-preferences.txt
          if [[ -f ".github/build-preferences.txt" ]]; then
            echo "üìã Reading build preferences..."
            preferred_apps=($(grep -v '^#' .github/build-preferences.txt | grep -v '^$' | tr -d ' '))
            echo "Found ${#preferred_apps[@]} preferred applications"
          else
            echo "‚ö†Ô∏è  No build-preferences.txt found, using fallback discovery..."
            # Fallback - find first 10 available apps
            preferred_apps=($(find bitnami -maxdepth 1 -type d -not -name "bitnami" | cut -d'/' -f2 | head -10))
          fi
          
            # Determine which files changed based on trigger
            changed_files=()
            if [[ "${{ github.event_name }}" == "push" ]]; then
              echo "üîÑ Push trigger - checking changed files..."
              # Get changed files from push event
              changed_files=($(git diff --name-only HEAD~1 HEAD | grep "bitnami/.*/Dockerfile" || true))
              echo "Changed Dockerfiles: ${changed_files[*]}"
            else
              echo "üîß Manual trigger - building all preferred images..."
              # For manual runs, build all preferred apps
              for app in "${preferred_apps[@]}"; do
                app_dir="bitnami/$app"
                if [[ -d "$app_dir" ]]; then
                  dockerfiles=($(find "$app_dir" -name "Dockerfile" -type f | sort -V))
                  if [[ ${#dockerfiles[@]} -gt 0 ]]; then
                    changed_files+=("${dockerfiles[-1]}")  # Add latest dockerfile
                  fi
                fi
              done
            fi
          
          echo "üîç Processing changed files..."
          for dockerfile in "${changed_files[@]}"; do
            if [[ -f "$dockerfile" ]]; then
              # Extract app name from path: bitnami/APP/VERSION/OS/Dockerfile
              IFS='/' read -ra PARTS <<< "$dockerfile"
              app_name="${PARTS[1]}"
              version="${PARTS[2]}"  
              os="${PARTS[3]}"
              
              # Check if this app is in our preferred list
              if [[ " ${preferred_apps[*]} " =~ " ${app_name} " ]]; then
                echo "  ‚úÖ Changed and preferred: $app_name v$version ($os)"
                images+=("{\"app\":\"$app_name\",\"version\":\"$version\",\"os\":\"$os\",\"dockerfile\":\"$dockerfile\"}")
              else
                echo "  ‚è≠Ô∏è  Changed but not in preferences: $app_name (skipping)"
              fi
            fi
          done
          
          # Create JSON matrix
          if [[ ${#images[@]} -eq 0 ]]; then
            matrix="[]"
            count=0
          else
            matrix="[$(IFS=','; echo "${images[*]}")]"
            count=${#images[@]}
          fi
          
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "count=$count" >> $GITHUB_OUTPUT
          
          echo ""
          echo "üìã Discovery Summary:"
          echo "   Images found: $count"
          echo "   Matrix: $matrix"

  build-and-push:
    needs: discover-images
    if: needs.discover-images.outputs.count > 0
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        image: ${{ fromJSON(needs.discover-images.outputs.matrix) }}
      fail-fast: false
      max-parallel: 3  # Limit concurrent builds to avoid resource issues
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata and generate tags
        id: meta
        run: |
          dockerfile="${{ matrix.image.dockerfile }}"
          app="${{ matrix.image.app }}"
          
          echo "üîç Processing: $app"
          echo "üìÑ Dockerfile: $dockerfile"
          
          # Get version from Dockerfile label
          app_version=$(grep -o 'org.opencontainers.image.version="[^"]*"' "$dockerfile" | cut -d'"' -f2 || echo "")
          
          # Fallback to directory version if label not found
          if [[ -z "$app_version" ]]; then
            app_version="${{ matrix.image.version }}"
            echo "‚ö†Ô∏è  No version label found, using directory version: $app_version"
          else
            echo "‚úÖ Found version label: $app_version"
          fi
          
          # Generate image name and tags (lowercase for GHCR compatibility)
          # Use repository owner instead of full repository path to avoid namespace issues
          registry_base="${{ env.REGISTRY }}/${{ github.repository_owner }}"
          registry_base_lower=$(echo "$registry_base" | tr '[:upper:]' '[:lower:]')
          image_name="$registry_base_lower/$app"
          
          # Create comprehensive tag list
          tags="$image_name:latest"
          tags="$tags,$image_name:$app_version"
          
          # Add version-specific tag if different from directory version
          if [[ "$app_version" != "${{ matrix.image.version }}" ]]; then
            tags="$tags,$image_name:${{ matrix.image.version }}"
          fi
          
          # Add OS-specific tag
          tags="$tags,$image_name:${{ matrix.image.version }}-${{ matrix.image.os }}"
          
          echo "image-name=$image_name" >> $GITHUB_OUTPUT
          echo "version=$app_version" >> $GITHUB_OUTPUT
          echo "tags=$tags" >> $GITHUB_OUTPUT
          echo "context=$(dirname $dockerfile)" >> $GITHUB_OUTPUT
          
          echo "üèóÔ∏è  Building: $app v$app_version"
          echo "üì¶ Tags: $tags"
          echo "üìÅ Context: $(dirname $dockerfile)"
          
      - name: Build Docker image locally
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.meta.outputs.context }}
          file: ${{ matrix.image.dockerfile }}
          platforms: linux/amd64  # Build only amd64 for scanning, multi-arch later
          push: false
          load: true  # Load image to local Docker daemon for scanning
          tags: local-scan:${{ matrix.image.app }}
          labels: |
            org.opencontainers.image.title=${{ matrix.image.app }}
            org.opencontainers.image.description=Bitnami ${{ matrix.image.app }} container image (auto-built)
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=Apache-2.0
          cache-from: type=gha,scope=${{ matrix.image.app }}
          cache-to: type=gha,mode=max,scope=${{ matrix.image.app }}
          
      - name: Run Trivy security scan
        id: trivy-scan
        continue-on-error: true  # Don't fail the job, just capture the result
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'local-scan:${{ matrix.image.app }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL'
          vuln-type: 'os,library'
          ignore-unfixed: true
          limit-severities-for-sarif: true
          hide-progress: false
          exit-code: '1'  # Set exit code but don't fail job
          
      - name: Show Trivy scan results
        if: always()
        run: |
          echo "üîç Trivy scan outcome: ${{ steps.trivy-scan.outcome }}"
          echo "üìä Checking SARIF results..."
          if [[ -f "trivy-results.sarif" ]]; then
            echo "‚úÖ SARIF file exists ($(wc -c < trivy-results.sarif) bytes)"
            # Show summary of findings
            echo "üìã Vulnerability summary:"
            jq -r '.runs[0].results | length' trivy-results.sarif 2>/dev/null || echo "Could not parse SARIF"
            # Show any CRITICAL findings
            jq -r '.runs[0].results[] | select(.level == "error") | .message.text' trivy-results.sarif 2>/dev/null || echo "No CRITICAL vulnerabilities found"
          else
            echo "‚ùå SARIF file not found"
          fi
          echo ""

      - name: Upload Trivy scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Security scan summary
        if: always()
        run: |
          if [[ "${{ steps.trivy-scan.outcome }}" == "success" ]]; then
            echo "üõ°Ô∏è **Security Scan: PASSED** ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "No critical or high severity vulnerabilities found." >> $GITHUB_STEP_SUMMARY
          else
            echo "üö® **Security Scan: FAILED** ‚ùå" >> $GITHUB_STEP_SUMMARY
            echo "Critical or high severity vulnerabilities detected!" >> $GITHUB_STEP_SUMMARY
            echo "Image will NOT be pushed to registry." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
      - name: Build and push to registry
        if: steps.trivy-scan.outcome == 'success'
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.meta.outputs.context }}
          file: ${{ matrix.image.dockerfile }}
          platforms: linux/amd64,linux/arm64  # Multi-arch build for registry
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.title=${{ matrix.image.app }}
            org.opencontainers.image.description=Bitnami ${{ matrix.image.app }} container image (auto-built, security-scanned)
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=Apache-2.0
          cache-from: type=gha,scope=${{ matrix.image.app }}
          cache-to: type=gha,mode=max,scope=${{ matrix.image.app }}
          
      - name: Generate build summary
        if: always()
        run: |
          if [[ "${{ steps.trivy-scan.outcome }}" == "success" ]]; then
            echo "### ‚úÖ ${{ matrix.image.app }} v${{ steps.meta.outputs.version }} üõ°Ô∏è" >> $GITHUB_STEP_SUMMARY
            echo "**Registry:** ${{ steps.meta.outputs.image-name }}" >> $GITHUB_STEP_SUMMARY
            echo "**Tags:** ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
            echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
            echo "**Security:** ‚úÖ Passed (No critical/high vulnerabilities)" >> $GITHUB_STEP_SUMMARY
            echo "**Status:** üöÄ Published to registry" >> $GITHUB_STEP_SUMMARY
          else
            echo "### üö® ${{ matrix.image.app }} v${{ steps.meta.outputs.version }} - Security Issues" >> $GITHUB_STEP_SUMMARY
            echo "**Security:** ‚ùå Failed (Critical/high vulnerabilities found)" >> $GITHUB_STEP_SUMMARY
            echo "**Status:** üõë NOT published to registry" >> $GITHUB_STEP_SUMMARY
            echo "**Action:** Check security scan results in GitHub Security tab" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          

  build-summary:
    needs: [discover-images, build-and-push]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate final summary  
        run: |
          echo "## üöÄ Auto Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Images discovered:** ${{ needs.discover-images.outputs.count }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build status:** ${{ needs.build-and-push.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** ${{ env.REGISTRY }}/${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build-and-push.result }}" == "success" ]]; then
            echo "üéâ All images built successfully!" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.build-and-push.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è Some builds failed. Check individual job logs for details." >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.discover-images.outputs.count }}" == "0" ]]; then
            echo "‚ÑπÔ∏è No images found to build." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìñ Usage" >> $GITHUB_STEP_SUMMARY
          echo "Pull your images with:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/IMAGE_NAME:latest" | tr '[:upper:]' '[:lower:]' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
